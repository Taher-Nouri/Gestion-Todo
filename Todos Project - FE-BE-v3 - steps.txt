====

ng new TodoProject

* Step 10 - Generating Welcome Component with ng generate
ng generate component welcome

* Step 12 - Generating and Setting up Login Component
ng generate component login

in login.component.html
User name: <input type="text" name="username">
Password: <input type="password" name="password">
<button (click)="handleClick()">Login</button>

username = "ayoub";
password= "";
  
handleClick(){
console.log(this.username);
}

==========
* Step 14 - Using ngModel with 2 Way Data Binding in Login Page

User name: <input type="text" name="username" [(ngModel)]="username">
Password: <input type="password" name="password" [(ngModel)]="password">

import { FormsModule } from '@angular/forms';

  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],

==========  
* Step 16 - Adding Hardcoded Authentication to Logic Component - ngIf directive  

==========

<small *ngIf="invalidLogin">{{errorMessage}}</small>

<div>
  User name: <input type="text" name="username" [(ngModel)]="username">
  Password: <input type="password" name="password" [(ngModel)]="password">
  <button (click)="handleClick()">Login</button>
</div>


  errorMessage= 'Invalid Credentials';
  invalidLogin = false;


  handleClick(){
    // console.log(this.username);
    if (this.username==="ayoub" && this.password==="dummy")
    {
      this.invalidLogin = false;
    }
    else{
      this.invalidLogin = true;
    }

  }

==========
Step 17 - Implementing Routes for Login, Welcome and Error Components

app.component.html:
<!-- <app-login></app-login> -->
<router-outlet></router-outlet>

ng generate component error

error.component.html:
{{errorMessage}}

error.component.ts:
  errorMessage="An error occured! Contact support at *** - ***"


app-routing.module.ts:
  {path:'', component:LoginComponent},
  {path:'welcome', component:WelcomeComponent},
  {path:'login', component:LoginComponent},
  {path:'**', component:ErrorComponent}
  
  
==========
* Step 18 - Implementing Routing from Login to Welcome Component

login.component.ts:

  constructor(private router: Router) { }

  
  
    if (this.username==="ayoub" && this.password==="dummy")
    {
      this.invalidLogin = false;
      this.router.navigate(['welcome']);
    }
    else{
      this.invalidLogin = true;
    }



==========

* Step 19 - Adding Route Parameter for Welcome Component

const routes: Routes = [
  {path:'', component:LoginComponent},
  {path:'login', component:LoginComponent},
  {path:'welcome/:name', component:WelcomeComponent},
  {path:'**', component:ErrorComponent}
];


welcome.component.ts

  name: "";

  constructor(private route: ActivatedRoute) { }

  ngOnInit() {
    this.name = this.route.snapshot.params['name'];
  }
  
  
login.component.ts:
      // this.router.navigate(['welcome']);
      this.router.navigate(['welcome', this.username]);  

welcome.component.html:
<div>
Welcome {{name}},

Welcome to our awesome App.
</div>
	  
==========

* Step 20 - Create List Todos Component with ng generate

==========
ng generate component listTodos

const routes: Routes = [
  {path:'', component:LoginComponent},
  {path:'login', component:LoginComponent},
  {path:'welcome/:name', component:WelcomeComponent},
  {path:'todos', component:ListTodosComponent},
  {path:'**', component:ErrorComponent}
];



  todos = [
    {id: 1, description: 'Learn to cook'},
    {id: 2, description: 'Become an expert at angular'},
    {id: 3, description: 'Visit family'}
  ]

  
  
<table border="1">
  <caption>My Todo's</caption>
  <thead>
    <tr>
      <th>id</th>
      <th>description</th>
    </tr>
  </thead>
  
  <tbody>
      <tr *ngFor="let todo of todos">
        <td>{{todo.id}}</td>
        <td>{{todo.description}}</td>
      </tr>
  </tbody>
</table>  



==========
* Step 21 - Create a Link to Todos in Welcome Component

welcome.component.html:

<div>
Welcome {{name}},

Welcome to our awesome App.
</div>

<div>
You wan manage your todos <a routerLink="/todos">here</a>
</div>

==========
* Step 22 - Best Practice - Create a Todo Class

list-todos.component.ts:

export class Todo{
  constructor(
    public id: number,
    public description: string,
    public done: boolean,
    public targetDate: Date
    )
  {
  }
}


  todos = [
    new Todo(1, 'Learn to cook', false, new Date()),
    new Todo(2, 'Become an expert at angular', false, new Date()),
    new Todo(3, 'Visit family', false, new Date())
  ]


list-todos.component.html:
<table border="1">
  <caption>My Todo's</caption>
  <thead>
    <tr>
      <th>Description</th>
      <th>Target Date</th>            
      <th>Is Completed?</th>

    </tr>
  </thead>
  
  <tbody>
      <tr *ngFor="let todo of todos">
        <td>{{todo.description}}</td>
        <td>{{todo.targetDate | date | uppercase}}</td>
        <td>{{todo.done}}</td>                
      </tr>
  </tbody>
</table>    
==========
* Step 27 - Adding Bootstrap Framework and Creating Components for Menu and Footer

styles.css:
@import url(https://unpkg.com/bootstrap@4.1.0/dist/css/bootstrap.min.css)

ng g c menu
ng g c footer

menu.component.html:
TOP MENU ELEMENTS <BR><BR>

footer.component.html:
<BR><BR> FOOTER 

html of menu and footer

app.component.html:
<app-menu></app-menu>
<router-outlet></router-outlet>
<app-footer></app-footer>
==========

* Step 28 - Using Bootstrap to Create a Menu with Navigation Links

menu.component.html:
<header>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div><a href="http://www.huge-coders.com/" class="navbar-brand">
            Huge Coders</a></div>

        <ul class="navbar-nav">
            <li><a routerLink="/welcome/ayoub" class="nav-link">Home</a></li>
            <li><a routerLink="/todos" class="nav-link">Todos</a></li>
        </ul>

        <ul class="navbar-nav navbar-collapse justify-content-end">
                <li><a routerLink="/login" class="nav-link">Login</a></li>
                <li><a routerLink="/logout" class="nav-link">Logout</a></li>
        </ul>
    </nav>
</header>

==========
* Step 29 - Styling Footer and Other Components with CSS and Bootstrap

footer.component.html:
<footer class="footer">
    <div class="container">
        <span class="text-muted">All Rights Reserved 2019 @huge-coders</span>
    </div>

</footer>

footer.component.css:
.footer {
    position: absolute;
    bottom: 0;
    width:100%;
    height: 40px;
    background-color: #222222;
}

app.component.html:
<div class="container">
  <router-outlet></router-outlet>
</div>

list-todos.component.html:
<table class="table">

<h1>My Todo's</h1>
+ remove caption

put the <table> inside 
<div class="container"></div>




login.component.html:
<h1>Login!</h1>

<div class="container">
  <div class="alert alert-warning" *ngIf="invalidLogin">{{errorMessage}}</div>

  <div>
    User name: <input type="text" name="username" [(ngModel)]="username">
    Password: <input type="password" name="password" [(ngModel)]="password">
    <button (click)="handleClick()" class="btn btn-success">Login</button>
  </div>
</div>
==========


* Step 31 - Creating an Independent Authentication Service Component
ng generate service hardcodedAuthentication

hardcoded-authentication.service.ts:
authenticate(username, password){
    if (username==="ayoub" && password==="dummy"){
      return true;
    }
    return false;
  }
  
  

login.component.ts:

constructor(private router: Router, 
    private hardcodedAuthenticationService: HardcodedAuthenticationService) 
  {

  }

  
  
  handleClick(){
    if (this.hardcodedAuthenticationService.authenticate(this.username, this.password))
    {
      this.invalidLogin = false;
      this.router.navigate(['welcome', this.username]);
    }
    else{
      this.invalidLogin = true;
    }
  
  
  
==========
* Step 32 - Using Session Storage to Store User Authentication Token

hardcoded-authentication.service.ts:
  authenticate(username, password){
    if (username==="ayoub" && password==="dummy"){
      sessionStorage.setItem('authenticaterUser', username);
      return true;
    }
    return false;
  }

  isUserLoggedIn() {
    let user = sessionStorage.getItem('authenticaterUser')
    return !(user === null)
  }
  
  
==========
* Step 33 - Enabling Menu Links Based on User Authentication Token

menu.component.ts:
  constructor(private hardcodedAuthenticationService 
    : HardcodedAuthenticationService) { }
	
	
	
menu.component.html:
<header>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div><a href="http://www.huge-coders.com/" class="navbar-brand">
            Huge Coders</a></div>

        <ul class="navbar-nav">
            <li><a *ngIf="hardcodedAuthenticationService.isUserLoggedIn()" routerLink="/welcome/ayoub" class="nav-link">Home</a></li>
            <li><a *ngIf="hardcodedAuthenticationService.isUserLoggedIn()" routerLink="/todos" class="nav-link">Todos</a></li>
        </ul>

        <ul class="navbar-nav navbar-collapse justify-content-end">
                <li><a *ngIf="!hardcodedAuthenticationService.isUserLoggedIn()" routerLink="/login" class="nav-link">Login</a></li>
                <li><a *ngIf="hardcodedAuthenticationService.isUserLoggedIn()" routerLink="/logout" class="nav-link">Logout</a></li>
        </ul>
    </nav>
</header>
==========
* Step 34 - Implementing Logout to remove User Authentication Token
ng generate component logout


const routes: Routes = [
  {path:'', component:LoginComponent},
  {path:'login', component:LoginComponent},
  {path:'welcome/:name', component:WelcomeComponent},
  {path:'todos', component:ListTodosComponent},
  {path:'logout', component:LogoutComponent},
  {path:'**', component:ErrorComponent}
];



logout.component.html:
<H1>You are logged out</H1>
<div class="container">
  Thank You For Using Our Application.
</div>


hardcoded-authentication.service.ts:
  logout(){
    sessionStorage.removeItem('authenticaterUser')
  }

  
logout.component.ts  
  constructor(private hardcodedAuthenticationService: HardcodedAuthenticationService) { }  
  ngOnInit() {
    this.hardcodedAuthenticationService.logout();
  }
  
==========
* Step 35 - Securing Components using Route Guards - Part 1
// will ban access to urls like /todos directly (unless logged in)
ng generate service service/routeGuard
RouteGuardService implements CanActivate 

RouteGuardService.ts:
  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    if (this.hardcodedAuthenticationService.isUserLoggedIn())
    {
      return true;
    }
    
    return false;
  }
  


  constructor(private hardcodedAuthenticationService: HardcodedAuthenticationService) { }

  
  
  {path:'welcome/:name', component:WelcomeComponent, canActivate: [RouteGuardService]},
  {path:'todos', component:ListTodosComponent, canActivate: [RouteGuardService]},


test access to /todos while not logged in 
=> blank page

====================
// redirect /welcome and /todos to /login
route-guard.service.ts:

  constructor(private hardcodedAuthenticationService: HardcodedAuthenticationService
  , private router: Router) { }
	-----------------------																											
  
  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    if (this.hardcodedAuthenticationService.isUserLoggedIn())
    {
      return true;
    }
    
    this.router.navigate(['login']);
	--------------------------------
    return false;
  }
  
  

==========
* Step 45 - Initializing a RESTful Services Project with Spring Boot
// create project
// group: com.hc.jee.webservices
// Artifact: day27-restful-web-services


HelloWorldController: java
@RestController
public class HelloWorldController {

	@GetMapping(path = "/hello-world")
	public String helloWorld() {
		return "Hello World";
	}

	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {
		return new HelloWorldBean("Hello World");
	}
	
	///hello-world/path-variable/hugeCoders
	@GetMapping(path = "/hello-world/path-variable/{name}")
	public HelloWorldBean helloWorldPathVariable(@PathVariable String name) {
		return new HelloWorldBean(String.format("Hello World, %s", name));
	}
}

HelloWorldBean:java
public class HelloWorldBean {

	private String message;

	public HelloWorldBean(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	@Override
	public String toString() {
		return String.format("HelloWorldBean [message=%s]", message);
	}

==========
* Step 50 - Connecting Angular Frontend with Restful API - 1 - Creating Data Servi

add to welcome.component.html
<div class="container">
  Click here to get a customized welcome message 
  <button (click)="getWelcomeMessage()" class="btn btn-success">Get Welcome Message</button>
</div>


ng generate service service/data/welcomeData


welcome-data.service.ts:
  executeHelloWorldBeanService()
  {
    console.log("Execute Hello World Bean Service")
  }
  
	
welcome.component.ts
  constructor(
    private route:ActivatedRoute,
    private service:WelcomeDataService) { 
  }

  getWelcomeMessage() {
    console.log(this.service.executeHelloWorldBeanService());
	}
	
Test the click ok the new button	
==========
* Step 51 - Connecting Angular Frontend with Restful API - 2 - HttpClientModule an

app.module.ts:
import { HttpClientModule } from '@angular/common/http';

  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],

  
  
welcome-data.service.ts:
  constructor(private http:HttpClient) { }


  executeHelloWorldBeanService()
  {
    return this.http.get('http://localhost:8080/hello-world-bean');
    //console.log("Execute Hello World Bean Service")
  }


  

==========
* Step 52 - Connecting Angular Frontend with Restful API - 3 - Understanding Obser

welcome.component.ts:
  getWelcomeMessage() {
    // console.log(this.service.executeHelloWorldBeanService());
    this.service.executeHelloWorldBeanService().subscribe();
  }

Test the button click => Access to XMLHttpRequest at 'http://localhost:8080/hello-world-bean' from origin 'http://localhost:4200' has been blocked by CORS policy:   


@RestController
@CrossOrigin(origins="http://localhost:4200")
public class HelloWorldController {

Test the button click => No Error
==========
* Step 53 - Connecting Angular Frontend with Restful API - 4 - Understanding Subsc

welcome.component.ts:
  getWelcomeMessage() {
    // console.log(this.service.executeHelloWorldBeanService());
    this.service.executeHelloWorldBeanService().subscribe(
      response => this.handleSuccessfulResponse(response)
    );
  }

  handleSuccessfulResponse(response)
  {
    console.log(response);
  }

  
  
welcome-data.service.ts:
export class HelloWorldBean {
  constructor(public message:string){ }
}

  executeHelloWorldBeanService()
  {
    return this.http.get<HelloWorldBean>('http://localhost:8080/hello-world-bean');
						----------------
    //console.log("Execute Hello World Bean Service")
  }
  
  
  
welcome.component.ts:
  getWelcomeMessage() {
    // console.log(this.service.executeHelloWorldBeanService());
    this.service.executeHelloWorldBeanService().subscribe(
      response => this.handleSuccessfulResponse(response)
    );
  }

  handleSuccessfulResponse(response)
  {
    console.log(response);
    console.log(response.message);
  }  
  
welcome.component.html:  
<div class="container" *ngIf="welcomeMessageFromService">
    <H2>Your Customized Welcome Message</H2>
    {{welcomeMessageFromService}}
  </div>  

welcome.component.ts:
  message = 'Some Welcome Message'
  welcomeMessageFromService:string


  
  handleSuccessfulResponse(response)
  {
    this.welcomeMessageFromService = response.message
    // console.log(response);
    // console.log(response.message);
  }
  
==========
* Step 54 - Connecting Angular Frontend with Restful API - 5 - Handling Error Resp

	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {
		// return new HelloWorldBean("Hello World 2");
		throw new RuntimeException("Some error happened...");
	}

welcome.component.ts:
  getWelcomeMessage() {
    // console.log(this.service.executeHelloWorldBeanService());
    this.service.executeHelloWorldBeanService().subscribe(
      response => this.handleSuccessfulResponse(response),
      error => this.handleErrorResponse(error)
    );
  }


  handleErrorResponse(error) {
    console.log(error);
    console.log(error.error);
    console.log(error.error.message);
    this.welcomeMessageFromService = error.error.message

  }
  
==========
* Step 55 - Calling Welcome HTTP Service with Path Variables


	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {
		return new HelloWorldBean("Hello World 2");
		// throw new RuntimeException("Some error happened. Contact support at *** - ***");
	}

welcome-data.service.ts	
  executeHelloWorldServiceWithPathVariable(name) {
    return this.http.get<HelloWorldBean>(`http://localhost:8080/hello-world/path-variable/${name}`);
    //console.log("Execute Hello World Bean Service")
  }


welcome.component.ts:
getWelcomeMessageWithParameter() {
    //console.log(this.service.executeHelloWorldBeanService());
    
    this.service.executeHelloWorldServiceWithPathVariable(this.name).subscribe(
      response => this.handleSuccessfulResponse(response),
      error => this.handleErrorResponse(error)
    );
  }  

welcome.component.html:
<div class="container">
  Click here to get a customized welcome message WITH PARAMETERS
  <button (click)="getWelcomeMessageWithParameter()" class="btn btn-success">Get Welcome Message</button>
</div>

<div class="container" *ngIf="welcomeMessageFromService">
    <H2>Your Customized Welcome Message</H2>
    {{welcomeMessageFromService}}
  </div>  
==========
* Step 57 - Creating REST API for retrieving Todo List
Todo.java
TodoHardcodedService.java
TodoController.java

==========
* Step 58 - Connecting Angular Frontend with Todo List RESTful Service

ng generate service service/data/todoData

todo-data.service.ts:
  constructor(private http:HttpClient) { }


  retrieveAllTodos(username) {
    return this.http.get<Todo[]>(`http://localhost:8080/users/${username}/todos`);
    //console.log("Execute Hello World Bean Service")
  }

  

list-todos.component.ts:
  todos: Todo[];
  // todos = [
  //   new Todo(1, 'Learn to cook', false, new Date()),
  //   new Todo(2, 'Become an expert at angular', false, new Date()),
  //   new Todo(3, 'Visit family', false, new Date())
  // ]

  constructor(private todoService:TodoDataService) { }


  ngOnInit() {
    this.todoService.retrieveAllTodos('ayoub').subscribe(
      response => {
        console.log(response);
        this.todos = response;
      }
    )
  }


test retrieving data

==========
* Step 59 - Creating REST API to delete a Todo - 1 - Create DELETE Request Method
Implement delete @ backend
==========
* Step 60 - Adding Delete Todo Feature to Angular Frontend

list-todos.component.html:
        <th>Actions</th>
          <td><button (click)="deleteTodo(todo.id)" class="btn btn-warning">Delete</button></td>          

		  

todo-data.service.ts:
  deleteTodo(username, id){
    return this.http.delete(`http://localhost:8080/users/${username}/todos/${id}`);
  }		  
  
list-todos.component.ts  
  message: string

  deleteTodo(id) {
    console.log(`delete todo ${id}` )
    this.todoService.deleteTodo('ayoub', id).subscribe (
      response => {
        console.log(response);
        this.message = `Delete of Todo ${id} Successful!`;
        this.refreshTodos();		
      }
    )
  }  
  

  ngOnInit() {
    this.refreshTodos();
  }

  refreshTodos(){
    this.todoService.retrieveAllTodos('ayoub').subscribe(
      response => {
        console.log(response);
        this.todos = response;
      }
    )
  }

  
list-todos.component.html  
<div class="alert alert-success" *ngIf='message'>{{message}}</div>  



=========
**********
==========  
	
	
	
==========
* Step 61 - Creating Todo Component and Handle Routing

list-todos.component.html:
        <th>Update</th>
        <th>Delete</th>
          <td><button (click)="updateTodo(todo.id)" class="btn btn-success">Update</button></td>          
          <td><button (click)="deleteTodo(todo.id)" class="btn btn-warning">Delete</button></td>          



ng generate component todo
  
app-routing.module.ts  
  { path: 'todos/:id', component: TodoComponent, canActivate:[RouteGuardService] },  
  
  
list-todos.component.ts
  constructor(
    private todoService:TodoDataService,
    private router : Router
  ) { }  

updateTodo(id) {
    console.log(`update ${id}`)
    this.router.navigate(['todos',id])
  }
==========
* Step 62 - Designing Todo Page with Bootstrap Framework

todo.component.html: 
<H1>Todo</H1>

<div class="container">
  
  <fieldset class="form-group">
    <label>Description</label>
    <input type="text" [(ngModel)]="todo.description" class="form-control" name="description" required="required">
  </fieldset>

  <fieldset class="form-group">
      <label>Target Date</label>
      <input type="date" [(ngModel)]="todo.targetDate"  class="form-control" name="targetDate" required="required">
  </fieldset>

  <button class="btn btn-success" (click)="saveTodo()">Save</button>

</div>
==========
* Step 63 - Creating Retrieve Tod0 Service and Connect Angular Frontend
getTodo() in java

todo-data.service.ts:
  retrieveTodo(username, id){
    return this.http.get<Todo>(`http://localhost:8080/users/${username}/todos/${id}`);
  }

todo.component.ts:  
  id:number
  todo: Todo

  constructor(
    private todoService: TodoDataService,
    private route: ActivatedRoute
  ) { }

  ngOnInit() {
    this.id = this.route.snapshot.params['id'];
    this.todoService.retrieveTodo('ayoub', this.id)
        .subscribe (
          data => this.todo = data
        )
  }
  
  
see now update page: => partially working, with 2 errors  
==========
* Step 64 - Improve Todo Page Appearance

todo.component.ts:
// first exception is because todo is null at first load 

  ngOnInit() {
    this.id = this.route.snapshot.params['id'];
    this.todo = new Todo(1,'',false,new Date());
	-------------------------------------------
    this.todoService.retrieveTodo('ayoub', this.id)
        .subscribe (
          data => this.todo = data
        )
  }

 
todo.component.html:
      <input type="date" 
      [ngModel]="todo.targetDate | date:'yyyy-MM-dd' "
      (ngModelChange)="todo.targetDate = $event"
      class="form-control" name="targetDate" required="required">
 
==========
* Step 65 - Creating REST API for Updating Todo - PUT Request Method
Update code in java:
==========
* Step 66 - 1 - Creating REST API for Creating a Todo - POST Request Method
Create todo code in java:

==========
* Step 66 - 2 - RESTful Web Services - Best Practices
See Responses Status in ppt
==========
* Step 67 - Implementing Update Todo Feature in Angular Frontend

todo-data.service.ts:
  updateTodo(username, id, todo){
    return this.http.put(
                `http://localhost:8080/users/${username}/todos/${id}`
                , todo);
  }

  
todo.component.ts:
  constructor(
    private todoService: TodoDataService,
    private route: ActivatedRoute,
    private router: Router
  ) { }

    saveTodo() {
    this.todoService.updateTodo('ayoub', this.id, this.todo)
        .subscribe (
          data => {
            console.log(data)
            this.router.navigate(['todos'])
          }
        )
  }

==========
* Step 68 - Implementing New Todo Feature in Angular Frontend
list-todos.component.html:
  <div class="row">
      <button (click)="addTodo()" class="btn btn-success">Add</button>
  </div>

list-todos.component.ts:  
    addTodo() {
    this.router.navigate(['todos',-1])
  }

  
  
todo.component.ts:
  ngOnInit() {
    this.id = this.route.snapshot.params['id'];
    // this.todo = new Todo(1,'',false,new Date());
    this.todo = new Todo(this.id,'',false,new Date());

    if(this.id!=-1) {
      this.todoService.retrieveTodo('ayoub', this.id)
          .subscribe (
            data => this.todo = data
          )
    }
  }


  saveTodo() {
    if(this.id === -1) {
      this.todoService.createTodo('ayoub', this.todo)
          .subscribe (
            data => {
              console.log(data)
              this.router.navigate(['todos'])
            }
          )
    } else {
      this.todoService.updateTodo('ayoub', this.id, this.todo)
          .subscribe (
            data => {
              console.log(data)
              this.router.navigate(['todos'])
            }
          )
    }
  }

  
todo-data.service.ts
  createTodo(username, todo){
    return this.http.post(
                `http://localhost:8080/users/${username}/todos`
                , todo);
  }
  
==========
* Step 69 - Improving Todo Form - Validation and Form Submit on Enter - ngSubmit
// 1- submit once clicked on enter
// 2- don't allow empty filed + length < 5

todo.component.html:

1- 
inside <form>
button: type submit + delete click event from it
<button type="submit" class="btn btn-success">Save</button>

<form (ngSubmit)="saveTodo()">

2- 
<form (ngSubmit)="!todoForm.invalid && saveTodo()" #todoForm="ngForm">

<input type="text" [(ngModel)]="todo.description" class="form-control" name="description" required="required" minlength="5">

==========
* Step 70 - Enhancing Validation Messages on Todo Page

todo.component.css:
.ng-invalid:not(form) {
    border-left: 5px solid red;
}


  <div class="alert alert-warning" *ngIf="todoForm.dirty && todoForm.invalid">Enter valid values</div>
  <div class="alert alert-warning" *ngIf="todoForm.dirty && targetDate.invalid">Enter valid Target Date</div>
  <div class="alert alert-warning" *ngIf="todoForm.dirty && description.invalid">Enter atleast 5 characters in Description</div>

      <input type="text" #description="ngModel" 
            [(ngModel)]="todo.description" class="form-control" 
                name="description" required="required" minlength="5">

				
        <input type="date" #targetDate="ngModel"
        [ngModel]="todo.targetDate | date:'yyyy-MM-dd' "
        (ngModelChange)="todo.targetDate = $event"
        class="form-control" name="targetDate" required="required" >
				
